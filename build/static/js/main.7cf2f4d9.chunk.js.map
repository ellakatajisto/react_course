{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","baseUrl","axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","errorMessage","setErrorMessage","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","concat","value","onChange","target","type","map","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"gNAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAE3B,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACR,wBAAQC,QAASL,EAAjB,SAAoCC,QCKzBK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAIP,qBAAKJ,UAAU,QAAf,SACGI,K,gBCRDC,EAAU,kCAiBC,EAfF,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCTvCK,G,MAAS,WAOb,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACE,uBACA,4GAmGSC,EA9FH,WAAO,IAAD,EAEUC,mBAAS,IAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGcF,mBAAS,IAHvB,mBAGTG,EAHS,KAGAC,EAHA,OAIwBJ,mBAAS,MAJjC,mBAITK,EAJS,KAIKC,EAJL,OAKcN,oBAAS,GALvB,mBAKTO,EALS,KAKAC,EALA,KAOdC,qBAAU,WACRC,IAECvB,MAAK,SAAAwB,GACJT,EAASS,QAEZ,IAIL,IA2CMC,EAAcL,EAClBN,EACAA,EAAMY,QAAO,SAAAtC,GAAI,OAAIA,EAAKG,aAE1B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcK,QAASsB,IACvB,uBAAMS,SAxBI,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjBrC,QAASuB,EACTe,MAAM,IAAIC,MAAOC,cACjB1C,UAAW2C,KAAKC,SAAW,IAG7BZ,EACUO,GACP9B,MAAK,SAAAoC,GACJrB,EAASD,EAAMuB,OAAOD,IACtBnB,EAAW,QAYX,UACE,6CACY,uBAAOqB,MAAOtB,EAASuB,SArDjB,SAACX,GACzBX,EAAWW,EAAMY,OAAOF,aAsDlB,8BACA,yBAAQ5C,QAAS,kBAAM2B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGhC,8BACA,wBAAQqB,KAAK,SAAb,wBAGF,6BACGhB,EAAYiB,KAAI,SAAAtD,GAAI,OACjB,cAAC,EAAD,CACAA,KAAMA,EACNC,iBAAkB,kBA/DH,SAAAgB,GACzB,IAAMjB,EAAO0B,EAAM6B,MAAK,SAAAC,GAAC,OAAIA,EAAEvC,KAAOA,KAChCwC,EAAW,2BAAQzD,GAAR,IAAcG,WAAYH,EAAKG,YAGhDgC,EACQlB,EAAIwC,GACX7C,MAAK,SAAAoC,GACJrB,EAASD,EAAM4B,KAAI,SAAAtD,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAOgD,SAEpDU,OAAM,SAAAC,GACL5B,EAAgB,SAAD,OACJ/B,EAAKK,QADD,sCAGfuD,YAAW,WACT7B,EAAgB,QACf,KACHJ,EAASD,EAAMY,QAAO,SAAAkB,GAAC,OAAIA,EAAEvC,KAAOA,SA8CJ4C,CAAmB7D,EAAKiB,MAFrCjB,EAAKiB,SAKtB,cAAC,EAAD,QCrFN6C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7cf2f4d9.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important' : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n    <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n  }\n  \n  const create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n  }\n  \n  const update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n  }\n  \n  export default { getAll, create, update }","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\nimport './index.css'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [showAll, setShowAll] = useState(true)\n\n    useEffect(() => {\n      noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n    })\n  }, [])\n\n\n  //handle changes in input field\nconst handleInputChange = (event) => {\n  setNewNote(event.target.value);\n}\n\n// a button to change the importance of notes\nconst toggleImportanceOf = id => {\n  const note = notes.find(n => n.id === id)\n  const changedNote = { ...note, important: !note.important }\n\n  //aseta Appiin kaikki vanhat notesit, paitsi muuttuneet jotka korvataan uusilla\n  noteService\n  .update(id, changedNote)\n  .then(returnedNote => {\n    setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n  })\n  .catch(error => {\n    setErrorMessage(\n      `Note '${note.content}' was already removed from server`\n    )\n    setTimeout(() => {\n      setErrorMessage(null)\n    }, 5000)\n    setNotes(notes.filter(n => n.id !== id))\n  })\n}\n\n//add a new note\nconst addNote = event => {\n  event.preventDefault()\n  const noteObject = {\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() > 0.5,\n  }\n\n  noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n}\n\nconst notesToShow = showAll\n? notes\n: notes.filter(note => note.important)\n  \n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <form onSubmit={addNote}>\n        <div>\n          add note: <input value={newNote} onChange={handleInputChange}/>\n        </div>\n        <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n        </div>\n        <div>\n        <button type=\"submit\"> add </button>\n      </div>\n      </form>\n      <ul>\n        {notesToShow.map(note => \n            <Note key={note.id}\n            note={note} \n            toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <Footer />\n    </div>\n  )\n}\n\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\n\nconst notes = [\n  {\n    id: 1,\n    content: 'HTML is easy',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true\n  },\n  {\n    id: 2,\n    content: 'Browser can execute only JavaScript',\n    date: '2019-05-30T18:39:34.091Z',\n    important: false\n  },\n  {\n    id: 3,\n    content: 'GET and POST are the most important methods of HTTP protocol',\n    date: '2019-05-30T19:20:14.298Z',\n    important: true\n  }\n]\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}